
#t!/bin/ksh
#------------------------------------------------------------------------------------------
#
#  University of South Florida
#  OPC/ESA UNIX-Side Shell Script (SQL Script)
#  
#  File Name      : com_app_imp_m.shl
#  Contact Person : Deepak Rout
#  Phone/E-Mail   : deepak@admin.usf.edu
#
#  Process Description and Special Notes/Instructions 
#------------------------------------------------------------------------------------------
# 
#  Software Modifications:
#  
#  Version      Date         Name        Description
#  -------      ----------   --------    -----------------------------
#  1.1          05-18-2004   Deepak      Initial creation for Appworx conversion
#               07-26-2004   Deepak      Added code to remove schedule from 
#                                        export files.
#               07-27-2004   Deepak      Added code to change roles  in 
#                                        export files as per area
#               05-16-2007   Deepak      Added more logic to sequence the 
#                                        export files for import
#  1.2          12-12-2007   BHurley     Changed schedules and roles logic 
#  1.3          10-15-2007   BHurley     Fixed grep of exp files to only include
#                                        files that contain literal '.exp ' 
#  1.4          03-09-2009   BHurley     Changed order of imports to be based on
#                                        the order in the txt file
#  1.5          02-19-2010   BHurley     Changed schedule removal logic so that 
#                                        it will only remove the schedule if the
#                                        overlay schedule prompt is N
#  1.6          02-21-2010   JAgana      Removed admin from the mail recipient. 
#  1.8          09-20-2012   JAgana      Changed to use jira directory instead of harvest.
#------------------------------------------------------------------------------------------
###
#
# This script is for CMSupport and will copy code and reports to their respective 
# application folders as well as import new appworx objects
#
###
wrkarea=$app_path/tmp/jira
l_area=`echo $app_path | cut -d"/" -f4`
echo "Processing in..." ${l_area}
mapfile=official_mapfile
import_directory=$1
log_path=`echo $import_directory | sed 's/import/out/g'`
issuenm=$2
overlay_sched=$3
rm -f $import_directory/*.* 2>/dev/null
cd ${wrkarea}
cd ${issuenm} 
l_mailid=`grep usf.edu chkout.log 2>/dev/null | cut -d"-" -f1`
l_mailid=$l_mailid" cmsupport@admin.usf.edu"
#l_mailid=$l_mailid" jagana@usf.edu"
echo "JIRA Status....\n" >$import_directory/pstats.log
echo "JIRA Status....\n"
sed '/usf.edu/d' chkout.log 2>/dev/null >>$import_directory/pstats.log
echo "\nStarting to copy files....\n" >>$import_directory/pstats.log
echo "\nStarting to copy files....\n" 
#
# remove control M characters from the text file
#
    echo doing text file translation...
    rm -f ${wrkarea}/${issuenm}/${issuenm}.txt.nom
    tr -d '\015' < ${wrkarea}/${issuenm}/${issuenm}.txt > ${wrkarea}/${issuenm}/${issuenm}.txt.nom
    rm -f ${wrkarea}/${issuenm}/${issuenm}.txt
    mv ${wrkarea}/${issuenm}/${issuenm}.txt.nom ${wrkarea}/${issuenm}/${issuenm}.txt
###
#
# loop through the files to process them
#
###
for x in `ls *.sql *.shl *.rdf *.dat *.ctl *.java 2>/dev/null`
do
#
# remove control M characters from the files to process
#
    echo doing ascii translation...
    rm -f ${wrkarea}/${issuenm}/${x}.nom
    tr -d '\015' < ${wrkarea}/${issuenm}/${x} > ${wrkarea}/${issuenm}/${x}.nom
    rm -f ${wrkarea}/${issuenm}/${x}
    mv ${wrkarea}/${issuenm}/${x}.nom ${wrkarea}/${issuenm}/${x}
# 
# check for filename in the text file and give an error if it is not there
#
    c=`grep -i $x ${issuenm}.txt|sed 's/^ [ \t]*//;s/[ \t]*$//'|tr [A-Z] [a-z]|head -1|sed '/^[   ]*$/d'|wc -w`
    [ $c -eq 0 ] && { echo "Error: $x not found in ${issuenm}.txt or incorrect format" ; continue ; }
#
# identify the application from the text file and make sure its directory exists
#
    appl=`grep -i $x ${issuenm}.txt |sed 's/  */\ /g'|cut -d" " -f3|tr [A-Z] [a-z]|tail -1`
    [ -z "${appl}" ] && { echo "Error: $x not  in correct format in ${issuenm}.txt" ; continue ; }
#
# identify the file extension and set the path
#
    ext=`echo $x | sed 's/^.\{1,\}*\.//g'`
    obj_path=`echo $app_path | cut -d"/" -f1,2,3,4`
    tar_loc=
    [ "${ext}" = "shl" ] && tar_loc="shells"
    [ "${ext}" = "dat" ] && tar_loc="jcl"
    [ "${ext}" = "sql" -o "${ext}" = "rdf" -o "${ext}" = "ctl" -o "${ext}" = "java" ] && tar_loc="${ext}"
    if [ -z "${appl}" -o -z "${obj_path}" -o -z "${tar_loc}" ]; then
      echo "Can't copy $x. Couldn't create application path...." 
    else
      rm -f ${obj_path}/${appl}/${tar_loc}/${x}   
      cp ${x} ${obj_path}/${appl}/${tar_loc}/${x} && chmod 755 ${obj_path}/${appl}/${tar_loc}/${x} && echo "$x copied to ${obj_path}/${appl}/${tar_loc} \n"
      rm -f ${x} 2> /dev/null
    fi
done >>$import_directory/pstats.log
echo "prepare to import"
###
#
# prepare for import
#
###
l_subject1=
grep -lh "Error" $import_directory/pstats.log && l_subject1="${issuenm} process status - File copy error"
[ -z "${l_subject1}" ] && l_subject1="${issuenm} process status - Success"
echo $wrkarea
cp $wrkarea/$issuenm/*.exp $import_directory/. || { mailx -s "${l_subject1}" ${l_mailid} < $import_directory/pstats.log ; \
# 
# if no exp files, cleanup and exit
#
echo "No files found to import" ; rm -rf $import_directory/pstats.log 2>/dev/null ; rm -rf $wrkarea/$issuenm ; exit 0 ; }
cd $import_directory
#
# read order from text file
#
echo " " > imp.txt
grep -i '\.exp ' $wrkarea/$issuenm/${issuenm}.txt | cut -d " " -f1 | sed s/.exp$//g| sed 's/exp\\//'  >> imp.txt
#
# role modifications 
#
 for x in `cat $import_directory/imp.txt | grep -v "^[	]*$" | grep _[mcMC]$`
 do 
  echo "Changing role for" $x
  if [ -f $x.exp ]; then
    l_role=`echo $x | sed 's/_.\{1,\}.//g' | tr [a-z] [A-Z]`
 # This command deletes all blank lines:  sed '/^$/d'           
    grep -lh "CHECK R ${l_role}" $x.exp || cat $x.exp | sed '/^$/d' | sed '/CHECK R DEVELOPER/G'  | sed "s/^[      ]*$/CHECK R ${l_role}/g" > temp_exp    
    [ -f temp_exp ] && { rm -rf $x.exp ; mv temp_exp $x.exp ; }
#new begin
    grep -lh "CHECK R PRODSUPPORT-EDIT" $x.exp || cat $x.exp | sed '/^$/d' | sed '/CHECK R DEVELOPER/G'  | sed "s/^[      ]*$/CHECK R PRODSUPPORT-EDIT/g" > temp_exp    
    [ -f temp_exp ] && { rm -rf $x.exp ; mv temp_exp $x.exp ; }
#new end
#   grep -lh 'roles=DBA B DEVELOPER B ${l_role}' $x.exp || cat $x.exp | sed "s/roles=DBA B DEVELOPER B/roles=DBA B DEVELOPER B ${l_role} B/g"  > temp_exp    
    grep -lh 'roles=DBA B DEVELOPER B ${l_role}' $x.exp || cat $x.exp | sed "s/roles=DBA B DEVELOPER B/roles=DBA B DEVELOPER B PRODSUPPORT-EDIT B ${l_role} B/g"  > temp_exp      
    [ -f temp_exp ] && { rm -rf $x.exp ; mv temp_exp $x.exp ; }
  fi       
 done
# 
# Removing schedule section from the main chain/module
#
if [ $overlay_sched = "N" ]; then
 for l_main in `cat $import_directory/imp.txt | grep -v "^[     ]*$" | grep _[mcMC]$`
 do
  echo "Removing schedule from..." $l_main
  if [ ! -z "${l_main}" -a -f ${l_main}.exp ]; then
   #remove schedule block
   grep -lh "END aw_module_sched" ${l_main}.exp && sed '/START=aw_module_sched/,/END aw_module_sched/d' ${l_main}.exp > temp_main
   [ -f temp_main ] && { rm -rf ${l_main}.exp ; mv temp_main ${l_main}.exp ; }

   #remove schedule deletion
   #this line looks for the string and if it finds it will take any lines that start with the string and end with \ and
   #join with the line that follows. this is repeated until the line does not end with a \, all newline characters are removed and
   #a temp file is created
   grep -lh "DELETE=aw_module_sched" ${l_main}.exp && sed -e :a -e '/^DELETE=aw_module_sched.*\\$/N; s/\\\n//; ta' ${l_main}.exp > temp_main 
   [ -f temp_main ] && mv temp_main ${l_main}.exp
   sed '/^DELETE=aw_module_sched/d' ${l_main}.exp > temp_main && mv temp_main ${l_main}.exp 

   #remove schedule argument block
   grep -lh "START=aw_sched_args" ${l_main}.exp && sed '/START=aw_sched_args/,/END so_chain_args/d' ${l_main}.exp > temp_main
   [ -f temp_main ] && { rm -rf ${l_main}.exp ; mv temp_main ${l_main}.exp ; }

   #remove schedule argument deletion
   grep -lh "DELETE=aw_sched_args" ${l_main}.exp && sed -e :a -e '/^DELETE=aw_sched_args.*\\$/N; s/\\\n//; ta' ${l_main}.exp > temp_main || cp ${l_main}.exp temp_main
   [ -f temp_main ] && mv temp_main ${l_main}.exp
   sed '/^DELETE=aw_sched_args/d' ${l_main}.exp > temp_main && mv temp_main ${l_main}.exp

   #remove schedule exception block
   grep -lh "START=aw_module_except" ${l_main}.exp && sed '/START=aw_module_except/,/END aw_module_except/d' ${l_main}.exp > temp_main
   [ -f temp_main ] && { rm -rf ${l_main}.exp ; mv temp_main ${l_main}.exp ; }

   #remove schedule exception deletion
   grep -lh "DELETE=aw_module_except" ${l_main}.exp && sed -e :a -e '/^DELETE=aw_module_except.*\\$/N; s/\\\n//; ta' ${l_main}.exp > temp_main || cp ${l_main}.exp temp_main
   [ -f temp_main ] && mv temp_main ${l_main}.exp
   sed '/^DELETE=aw_module_except/d' ${l_main}.exp > temp_main && mv temp_main ${l_main}.exp
  fi
 done
fi
#
# problem related to EDIUser and ETT_COL
#
 sed 's/EDIUser/ETT_COL/g' ${l_main}.exp > temp_main
 [ -f temp_main ] && { rm -rf ${l_main}.exp ; mv temp_main ${l_main}.exp ; }
###
#
# start importing 
#
###
echo "\nStarting to import....\n" >> $import_directory/pstats.log
for x in `cat $import_directory/imp.txt | grep -v "^[	]*$"`
do
  echo "Importing $x...."
  status=
  jid=`awrun IMPEXP -v IMPORT -arg $x official_mapfile | sed 's/JOBID: //g'`
  while [ -z "${status}" ]
  do
    status=`appworx JH | grep $jid | tr -s ' ' |cut -d" " -f8`
  done
#  grep -w $x $import_directory/imp.txt | sed "s/$x/$x    ....... $status/g" >> $import_directory/pstats.log
  /usr/xpg4/bin/grep -x $x $import_directory/imp.txt | sed "s/$x/$x    ....... $status/g" >> $import_directory/pstats.log
  if [ "$status" != "FINISHED" ]; then 
   grep ORA- $log_path/o${jid}.00 >> $import_directory/pstats.log
   echo "Import errored out for $x .....status $status" ; 
   mailx -s "${issuenm} process status - Failed"  ${l_mailid} < $import_directory/pstats.log
   rm -rf $import_directory/imp.txt 2>/dev/null
   rm -rf $import_directory/pstats.log 2>/dev/null
   rm -rf $wrkarea/$issuenm
   exit 1 ; 
  fi
  rm -f $wrkarea/$x.exp 2>/dev/null
  echo "Imported successfully...."
  echo "Imported successfully...." >> $import_directory/pstats.log
done
###
#
# mail CMSupport a status email 
#
###
l_subject=
grep -lh "Error" $import_directory/pstats.log && l_subject="${issuenm} process status - File copy error"
[ -z "${l_subject}" ] && l_subject="${issuenm} process status - Success"
mailx -s "${l_subject}" ${l_mailid} < $import_directory/pstats.log
#
# cleanup temporary directory in common/tmp/jira and the import directory
#
rm -rf $import_directory/imp.txt 2>/dev/null
rm -rf $import_directory/pstats.log 2>/dev/null
rm -rf $wrkarea/$issuenm
echo "---------------------------------------------------------------"
echo "Job completed."
echo "---------------------------------------------------------------"
exit 0
